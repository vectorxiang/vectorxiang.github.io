---
layout: post
title:  "Linux 网络体系结构"
date:   2015-10-27
categories: [network]
---
>这里参考一下TCP/IP五层模型如下图，这个栈的最底部是**链路层**。链路层是指提供对物理层访问的设备驱动程序，这可以是各种介质，例如串口链路或以太网设备。链路层上面是**网络层**，它负责将报文定向到目标位置。再上一层称为**传输层**，负责端到端的通信（例如，在一台主机内部）。尽管网络层负责管理主机之间的通信，但是传输层需要负责管理主机内部各端之间的通信。最后一层是**应用层**，它通常是一个语义层，能够理解要传输的数据。例如，超文本传输协议(HTTP)就负责传输服务器和客户机之间对 Web 内容的请求与响应。

<center>![network_tcpip](/images/network/network_tcp_ip.gif)</center>

#Linux网络结构
<center>![linux_network](/images/network/linux_network.gif)</center>

最上面是用户空间层，或称为**应用层**，其中定义了网络栈的用户。底部是**物理设备**，提供了对网络的连接能力（串口或诸如以太网之类的高速网络）。中间是内核空间，即网络子系统，也是需要重点学习的地方。

###system call interface
系统调用接口是用户空间的应用程序正常访问内核的唯一合法途径（终端和陷入也可访问内核）。如:

```c
	asmlinkage long sys_socket(int, int, int);
```

系统调用一般由sys开头 ，前面的修饰符是asmlingkage，表示函数由堆栈获得参数。

###protocol agnositic interface
socket 层是一个协议无关接口，它提供了一组通用函数来支持各种不同协议。socket层不但可以支持典型的TCP和UDP协议，而且还可以支持IP、裸以太网和其他传输协议，例如SCTP（Stream Control Transmission Protocol）。

通过网络栈进行的通信都需要对 socket 进行操作。Linux 中的 socket 结构是 struct sock ，这个结构是在linux/include/net/sock.h中定义的。这个巨大的结构中包含了特定 socket 所需要的所有状态信息，其中包括 socket 所使用的特定协议和在 socket 上可以执行的一些操作。

网络子系统可以通过一个定义了自己功能的特殊结构来了解可用协议。每个协议都维护了一个名为 proto 的结构（可以在 linux/include/net/sock.h 中找到）。这个结构定义了可以在从 socket 层到传输层中执行特定的 socket 操作