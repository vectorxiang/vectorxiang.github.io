---
layout: post
title: "Android NFC 流程"
category: nfc
tags: [ nfc, android]
catalog: true
---
## nqnfcinfo
```c
service nqnfcinfo /system/vendor/bin/nqnfcinfo
    class late_start
    group nfc
    user system
    oneshot
```   

```c
/*
  path : /vendor/qcom/proprietary/nqnfc-firmware/nqnfcinfo/src/main.c
  func : set some property  sys.nfc.nq.chipid , sys.nfc.nq.fwver , persist.nfc.fw.version
*/
```

## NfcService
> /vendor/nxp/opensource/packages/apps/Nfc

```java
    <application android:name=".NfcApplication"
                 ......
                 android:persistent="true"
```

```java
/* 构造函数 */
    public NfcService(Application nfcApplication) {
        mUserId = ActivityManager.getCurrentUser();
        mContext = nfcApplication;

        mNfcTagService = new TagService();
        mNfcAdapter = new NfcAdapterService();
        mNxpNfcAdapter = new NxpNfcAdapterService();
        mExtrasService = new NfcAdapterExtrasService();
        mNxpExtrasService = new NxpNfcAdapterExtrasService();
      //  mCardEmulationService = new CardEmulationService();

        Log.i(TAG, "Starting NFC service");
        
        ......
        mDeviceHost = new NativeNfcManager(mContext, this);
        ......
        new EnableDisableTask().execute(TASK_BOOT);  // do blocking boot tasks
    }
```
先来看 NativeNfcManager ：
```java
public class NativeNfcManager implements DeviceHost {

    // 先加载 JNI library
    static {
        System.loadLibrary("nqnfc_nci_jni");
    }
```

JNI 部分代码在  /vendor/nxp/opensource/packages/apps/Nfc/nci/jni   
```java
// 主要是映射 native 方法
jint JNI_OnLoad (JavaVM* jvm, void*)
{
    ALOGV("%s: enter", __func__);
    JNIEnv *e = NULL;

    ALOGI("NFC Service: loading nci JNI");

    // 这里还调用了 PowerSwitch 的 initialize 
    if (android::register_com_android_nfc_NativeNfcManager (e) == -1)
        return JNI_ERR;
    ......
    if (android::register_com_android_nfc_NativeLlcpServiceSocket (e) == -1)
        return JNI_ERR;

    ALOGV("%s: exit", __func__);
    return JNI_VERSION_1_6;
}
```
### enable
```java
    final class NfcAdapterService extends INfcAdapter.Stub {
        @Override
        public boolean enable() throws RemoteException {
            NfcPermissions.enforceAdminPermissions(mContext);
            int val =  mDeviceHost.GetDefaultSE();

	    //保存当前设定的状态值
            saveNfcOnSetting(true);
            new EnableDisableTask().execute(TASK_ENABLE);
            return true;
        }
```

```java
        boolean enableInternal() {
            if (mState == NfcAdapter.STATE_ON) {
                return true;
            }
            Log.i(TAG, "Enabling NFC");
            updateState(NfcAdapter.STATE_TURNING_ON);
            
            // 设定 timeout watch dog
            WatchDogThread watchDog = new WatchDogThread("enableInternal", timeout);
            watchDog.start();
            
            try {
                mRoutingWakeLock.acquire();
                try {
                    if (!mDeviceHost.initialize()) {
                        Log.w(TAG, "Error enabling NFC");
                        updateState(NfcAdapter.STATE_OFF);
                        return false;
                    }
                } finally {
                    mRoutingWakeLock.release();
                }
            } finally {
                watchDog.cancel();
            }
            
            ......

            synchronized (NfcService.this) {
                mObjectMap.clear();
                mP2pLinkManager.enableDisable(mIsNdefPushEnabled, true);
                updateState(NfcAdapter.STATE_ON);
            }
            ......
            return true;
        }
```
主要工作都是在 NativeNfcManager 的 initialize() ,  该方法直接call 到 JNI 中的 nfcManager_doInitialize () 
```c

```


