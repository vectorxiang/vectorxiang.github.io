---
layout: post
title: "WPAS API"
description:
category: wifi
tags: [network, android , wifi]
mathjax: 
chart:
comments: false
---
在Android 平台中 WifiService 和 wpa_cli 都是 WAPS 的客户端， 他们在和 WPAS 交互时都会用到 wpa_supplicant 提供的接口。 这些接口全部声明在 wpa_ctrl.h 中，使用之前需要链接 libwpa_client.so 动态库, 另外需包含 wpa_ctrl.h 头文件。     

```c
LOCAL_SHARED_LIBRARIES += libwpa_client
```
```c
#include "libwpa_client/wpa_ctrl.h"
```
      
客户端使用wpa_ctrl时首先要分配控制对象。下面两个API用于创建和销毁控制对象wpa_ctrl, 其中 ctrl_path 在Android平台上代表 unix域socket的位置。

```c
struct wpa_ctrl * wpa_ctrl_open(const char *ctrl_path);

void wpa_ctrl_close(struct wpa_ctrl *ctrl); 
```
在获取到控制 wpa_ctrl 之后就可以给 WPAS 下 command ,其中 msg_cb是一个回调函数，该参数的设置和wpa_supplicant中C/S通信机制的设计有关。 

```c
int wpa_ctrl_request(struct wpa_ctrl *ctrl, const char *cmd, size_t cmd_len,  
             char *reply, size_t *reply_len,  
             void (*msg_cb)(char *msg, size_t len)); 
```
WPAS 回报的事件有两种: solicited event(有请求的事件)， 会通过上面的 reply 参数返回， 还有一种是 unsolicited event(未请求的事件)，在某些过程中 WPAS 可能会回报一些unsolicited event， 而这些 unsolicited event 会在上面的 msg_cb 中处理， 但这些事件默认是不会监听的，需使用下面两个函数来开启和关闭监听。

```c
int wpa_ctrl_attach(struct wpa_ctrl *ctrl); 
int wpa_ctrl_detach(struct wpa_ctrl *ctrl); 
```
而如果用户不想下 command ，只想去接收 unsolicited event ，可通过 wpa_ctrl_recv 函数

```c
int wpa_ctrl_recv(struct wpa_ctrl *ctrl, char *reply, size_t *reply_len);  
```
为了在操作上的便利，客户端会创建两个 wpa_ctrl，一个打开通知事件监听仅通过 wpa_ctrl_recv 来接收通知事件， 另一个 wap_ctrl 不会调用attach函数专门用于发送命令和接收回复。   

下面来看一下 wifiservice 中是怎么使用这几个API的     

```c
int wifi_connect_on_socket_path(const char *path)
{
    /* Make sure supplicant is running */
    ......

    //创建一个 wpa_ctrl 对象，用于发送命令
    ctrl_conn = wpa_ctrl_open(path);
    
    //创建第二个 wpa_ctrl 对象，用于接收 unsolicited event
    monitor_conn = wpa_ctrl_open(path);
    
    //需 attach 才能启用接收 unsolicited event 接收功能
    if (wpa_ctrl_attach(monitor_conn) != 0) {
        ......
        return -1;
    }

    if (socketpair(AF_UNIX, SOCK_STREAM, 0, exit_sockets) == -1) {
        ......
        return -1;
    }

    return 0;
}
```

```c
int wifi_send_command(const char *cmd, char *reply, size_t *reply_len)
{
    int ret;
    if (ctrl_conn == NULL) {
        ALOGV("Not connected to wpa_supplicant - \"%s\" command dropped.\n", cmd);
        return -1;
    }
    ret = wpa_ctrl_request(ctrl_conn, cmd, strlen(cmd), reply, reply_len, NULL);
    if (ret == -2) {
        ALOGD("'%s' command timed out.\n", cmd);
        /* unblocks the monitor receive socket for termination */
        TEMP_FAILURE_RETRY(write(exit_sockets[0], "T", 1));
        return -2;
    } else if (ret < 0 || strncmp(reply, "FAIL", 4) == 0) {
        return -1;
    }
    if (strncmp(cmd, "PING", 4) == 0) {
        reply[*reply_len] = '\0';
    }
    return 0;
```
没有特别指定事件处理函数， 后面处理了一下timeout 以及 fail 的状况。
